{"version":3,"sources":["app.js","nav/main-nav-controller.js","users/user-controller.js","users/user.js","users/users-controller.js","shares/shares-controller.js","utils/string-util.js","users/services/users-service.js"],"names":["app","angular","module","controller","$location","StringUtil","self","this","isActive","path","startsWith","config","$routeProvider","routeDefinition","templateUrl","controllerAs","resolve","user","$route","usersService","routeParams","current","params","getByUserId","userid","when","factory","spec","userId","role","users","list","User","newUser","addUser","then","filter","existingUser","push","shares","str","subStr","slice","length","$http","$q","$log","get","url","processAjaxPromise","p","result","data","error","log","Error","post"],"mappings":"AACA,GAAAA,KAAAC,QAAAC,OAAA,OAAA,WCDAF,KAAAG,WAAA,eACA,YAAA,aAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAC,IAEAD,GAAAE,SAAA,SAAAC,GAEA,MAAA,MAAAA,EACA,MAAAL,EAAAK,OAGAJ,EAAAK,WAAAN,EAAAK,OAAAA,OCVAT,IAAAW,QAAA,iBAAA,SAAAC,GACA,GAAAC,IACAC,YAAA,kBACAX,WAAA,WACAY,aAAA,KACAC,SACAC,MAAA,SAAA,eAAA,SAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAAG,QAAAC,MACA,OAAAH,GAAAI,YAAAH,EAAAI,WAKAZ,GAAAa,KAAA,iBAAAZ,MAEAV,WAAA,YAAA,OAAA,SAAAc,GACAV,KAAAU,KAAAA,KChBAjB,IAAA0B,QAAA,OAAA,WACA,MAAA,UAAAC,GAEA,MADAA,GAAAA,OAEAC,OAAAD,EAAAC,QAAA,GACAC,KAAAF,EAAAE,MAAA,WCLA7B,IAAAW,QAAA,iBAAA,SAAAC,GACA,GAAAC,IACAC,YAAA,mBACAX,WAAA,YACAY,aAAA,KACAC,SACAc,OAAA,eAAA,SAAAX,GACA,MAAAA,GAAAY,UAKAnB,GAAAa,KAAA,SAAAZ,MAEAV,WAAA,aAAA,QAAA,eAAA,OAAA,SAAA2B,EAAAX,EAAAa,GACA,GAAA1B,GAAAC,IAEAD,GAAAwB,MAAAA,EAEAxB,EAAA2B,QAAAD,IAEA1B,EAAA4B,QAAA,WAEA,GAAAjB,GAAAe,EAAA1B,EAAA2B,QAGAd,GAAAe,QAAAjB,GAAAkB,KAAA,WAEA7B,EAAAwB,MAAAxB,EAAAwB,MAAAM,OAAA,SAAAC,GACA,MAAAA,GAAAT,SAAAX,EAAAW,SAIAtB,EAAAwB,MAAAQ,KAAArB,KAIAX,EAAA2B,QAAAD,QCrCAhC,IAAAW,QAAA,iBAAA,SAAAC,GACA,GAAAC,IACAC,YAAA,qBACAX,WAAA,aACAY,aAAA,KAGAH,GAAAa,KAAA,IAAAZ,GACAD,EAAAa,KAAA,UAAAZ,MAEAV,WAAA,cAAA,WAEAI,KAAAgC,aCXAvC,IAAA0B,QAAA,aAAA,WACA,OACAhB,WAAA,SAAA8B,EAAAC,GAEA,MADAD,GAAAA,GAAA,GACAA,EAAAE,MAAA,EAAAD,EAAAE,UAAAF,MCLAzC,IAAA0B,QAAA,gBAAA,QAAA,KAAA,OAAA,SAAAkB,EAAAC,EAAAC,GAOA,QAAAC,GAAAC,GACA,MAAAC,GAAAL,EAAAG,IAAAC,IAGA,QAAAC,GAAAC,GACA,MAAAA,GAAAf,KAAA,SAAAgB,GACA,MAAAA,GAAAC,OADAF,SAGA,SAAAG,GACAP,EAAAQ,IAAAD,KAIA,OACAtB,KAAA,WACA,MAAAgB,GAAA,eAGAxB,YAAA,SAAAK,GACA,IAAAA,EACA,KAAA,IAAA2B,OAAA,iCAGA,OAAAR,GAAA,cAAAnB,IAGAM,QAAA,SAAAjB,GACA,MAAAgC,GAAAL,EAAAY,KAAA,aAAAvC","file":"app.js","sourcesContent":["// The root module for our Angular application\nvar app = angular.module('app', ['ngRoute']);\n","app.controller('MainNavCtrl',\n  ['$location', 'StringUtil', function($location, StringUtil) {\n    var self = this;\n\n    self.isActive = function (path) {\n      // The default route is a special case.\n      if (path === '/') {\n        return $location.path() === '/';\n      }\n\n      return StringUtil.startsWith($location.path(), path);\n    };\n  }]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/user.html',\n    controller: 'UserCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      user: ['$route', 'usersService', function ($route, usersService) {\n        var routeParams = $route.current.params;\n        return usersService.getByUserId(routeParams.userid);\n      }]\n    }\n  };\n\n  $routeProvider.when('/users/:userid', routeDefinition);\n}])\n.controller('UserCtrl', ['user', function (user) {\n  this.user = user;\n}]);\n","app.factory('User', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      userId: spec.userId || '',\n      role: spec.role || 'user'\n    };\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'users/users.html',\n    controller: 'UsersCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      users: ['usersService', function (usersService) {\n        return usersService.list();\n      }]\n    }\n  };\n\n  $routeProvider.when('/users', routeDefinition);\n}])\n.controller('UsersCtrl', ['users', 'usersService', 'User', function (users, usersService, User) {\n  var self = this;\n\n  self.users = users;\n\n  self.newUser = User();\n\n  self.addUser = function () {\n    // Make a copy of the 'newUser' object\n    var user = User(self.newUser);\n\n    // Add the user to our service\n    usersService.addUser(user).then(function () {\n      // If the add succeeded, remove the user from the users array\n      self.users = self.users.filter(function (existingUser) {\n        return existingUser.userId !== user.userId;\n      });\n\n      // Add the user to the users array\n      self.users.push(user);\n    });\n\n    // Clear our newUser property\n    self.newUser = User();\n  };\n}]);\n","app.config(['$routeProvider', function($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'shares/shares.html',\n    controller: 'SharesCtrl',\n    controllerAs: 'vm'\n  };\n\n  $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/shares', routeDefinition);\n}])\n.controller('SharesCtrl', [function () {\n  // TODO: load these via AJAX\n  this.shares = [];\n}]);\n","// A little string utility... no biggie\napp.factory('StringUtil', function() {\n  return {\n    startsWith: function (str, subStr) {\n      str = str || '';\n      return str.slice(0, subStr.length) === subStr;\n    }\n  };\n});\n","app.factory('usersService', ['$http', '$q', '$log', function($http, $q, $log) {\n  // My $http promise then and catch always\n  // does the same thing, so I'll put the\n  // processing of it here. What you probably\n  // want to do instead is create a convenience object\n  // that makes $http calls for you in a standard\n  // way, handling post, put, delete, etc\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      return result.data;\n    })\n    .catch(function (error) {\n      $log.log(error);\n    });\n  }\n\n  return {\n    list: function () {\n      return get('/api/users');\n    },\n\n    getByUserId: function (userId) {\n      if (!userId) {\n        throw new Error('getByUserId requires a user id');\n      }\n\n      return get('/api/users/' + userId);\n    },\n\n    addUser: function (user) {\n      return processAjaxPromise($http.post('/api/users', user));\n    }\n  };\n}]);\n"],"sourceRoot":"/source/"}